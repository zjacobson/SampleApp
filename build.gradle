
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath('io.swagger:swagger-codegen:2.3.1')
    }
}

plugins {
    id "java"
    id "application"
    id "idea"
    id "jacoco"
}


mainClassName = 'spothero.demo.Main'
group = 'spothero.demo' // your group name
version = '0.1.0'

repositories {
    jcenter()
    mavenCentral()
}


ext {
    jackson_version = '2.4.2'
    jersey_version = '1.18'
    jodatime_version = '2.3'
    junit_version = '4.12'
    gson_version='2.8.5'
    gson_fire_version='1.8.3'
}

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}



import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerInput = "${rootDir}/swagger.yaml"
def swaggerOutputDir = file('build/swagger')
task generateApi {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage': 'spothero.demo.client',
                'modelPackage'  : 'spothero.demo.client.model',
                'apiPackage'    : 'spothero.demo.client.api',
                'dateLibrary'   : 'java8'
        ])
        config.setImportMappings([
                'Dog': 'spothero.demo.client.model.Dog'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

clean.doFirst {
    delete(swaggerOutputDir)
}

configurations {
    swagger
}

sourceSets {
    swagger {
        compileClasspath = configurations.swaggerCompile
        java {
            srcDir file("${project.buildDir.path}/swagger/src/main/java")
        }
    }
    main {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
    test {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
}

compileSwaggerJava.dependsOn generateApi
classes.dependsOn swaggerClasses
compileJava.dependsOn compileSwaggerJava

dependencies {

    swaggerCompile 'io.swagger:swagger-annotations:1.5.16'
    swaggerCompile 'com.squareup.okhttp:okhttp:2.7.5'
    swaggerCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    swaggerCompile "com.google.code.gson:gson:$gson_version"
    swaggerCompile "io.gsonfire:gson-fire:$gson_fire_version"
    
    compile sourceSets.swagger.output

    compile 'org.slf4j:slf4j-log4j12:1.7.+' // for logging
    compile 'org.projectlombok:lombok:1.+'  // utilities for POJOs

    compile 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.8.+'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.+'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.+'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.8.+'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jaxrs:2.8.+'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.+'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.+'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.8.+'

    compile 'org.glassfish.grizzly:grizzly-http-server:2.4.3'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.+'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.+'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'

    compile 'org.glassfish.hk2:hk2-metadata-generator:2.4.0'
    compile 'org.glassfish.hk2:hk2-locator:2.4.0'
    testCompile "junit:junit:$junit_version"
    testCompile 'org.mockito:mockito-core:2.23.0'

    runtime 'com.squareup.okhttp:okhttp:2.7.5'
    runtime 'com.squareup.okhttp:logging-interceptor:2.7.5'
    runtime "com.google.code.gson:gson:$gson_version"
    runtime "io.gsonfire:gson-fire:$gson_fire_version"
}