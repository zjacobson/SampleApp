
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath('io.swagger:swagger-codegen:2.3.1')
    }
}

plugins {
    id 'war'
    id 'org.gretty' version '2.2.0'
}

repositories {
    jcenter()
    mavenCentral()
}


gretty {
    integrationTestTask = "test"
    servletContainer = 'jetty9'
}

ext {
    jackson_version = '2.4.2'
    jersey_version = '1.18'
    jodatime_version = '2.3'
    junit_version = '4.12'
    gson_version='2.8.5'
    gson_fire_version='1.8.3'
}


import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerInput = "${rootDir}/swagger.yaml"
def swaggerOutputDir = file('build/swagger')
task generateApi {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage': 'spothero.demo.client',
                'modelPackage'  : 'spothero.demo.client.model',
                'apiPackage'    : 'spothero.demo.client.api',
                'dateLibrary'   : 'java8'
        ])
        config.setImportMappings([
                'Dog': 'spothero.demo.client.model.Dog'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

clean.doFirst {
    delete(swaggerOutputDir)
}

configurations {
    swagger
}

sourceSets {
    swagger {
        compileClasspath = configurations.swaggerCompile
        java {
            srcDir file("${project.buildDir.path}/swagger/src/main/java")
        }
    }
    main {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
    test {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
}

compileSwaggerJava.dependsOn generateApi
classes.dependsOn swaggerClasses
compileJava.dependsOn compileSwaggerJava

dependencies {

    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'

    swaggerCompile 'io.swagger:swagger-annotations:1.5.16'
    swaggerCompile 'com.squareup.okhttp:okhttp:2.7.5'
    swaggerCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    swaggerCompile "com.google.code.gson:gson:$gson_version"
    swaggerCompile "io.gsonfire:gson-fire:$gson_fire_version"



    compile sourceSets.swagger.output

    compile "com.sun.jersey:jersey-client:$jersey_version"
    compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.1.5"
    compile "joda-time:joda-time:$jodatime_version"
    compile 'io.swagger:swagger-codegen:2.2.3'

    testCompile "junit:junit:$junit_version"
    testCompile 'org.mockito:mockito-core:2.23.0'

    runtime 'com.squareup.okhttp:okhttp:2.7.5'
    runtime 'com.squareup.okhttp:logging-interceptor:2.7.5'
    runtime "com.google.code.gson:gson:$gson_version"
    runtime "io.gsonfire:gson-fire:$gson_fire_version"
}